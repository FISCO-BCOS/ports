cmake_policy(PUSH)
cmake_policy(SET CMP0012 NEW)
cmake_policy(SET CMP0054 NEW)
cmake_policy(SET CMP0057 NEW)

set(TASSL_VERSION_MAJOR 1)
set(TASSL_VERSION_MINOR 1)
set(TASSL_VERSION_FIX 1)

if(TASSL_USE_STATIC_LIBS)
    if("@VCPKG_LIBRARY_LINKAGE@" STREQUAL "dynamic")
        message(WARNING "TASSL_USE_STATIC_LIBS is set, but vcpkg port openssl was built with dynamic linkage")
    endif()
    set(TASSL_USE_STATIC_LIBS_BAK "${TASSL_USE_STATIC_LIBS}")
    set(TASSL_USE_STATIC_LIBS FALSE)
endif()

if(DEFINED TASSL_ROOT_DIR)
    set(TASSL_ROOT_DIR_BAK "${TASSL_ROOT_DIR}")
endif()
get_filename_component(TASSL_ROOT_DIR "${CMAKE_CURRENT_LIST_DIR}" DIRECTORY)
get_filename_component(TASSL_ROOT_DIR "${TASSL_ROOT_DIR}" DIRECTORY)
find_path(TASSL_INCLUDE_DIR NAMES openssl/ssl.h PATH "${TASSL_ROOT_DIR}/include" NO_DEFAULT_PATH)
if(MSVC)
    find_library(LIB_EAY_DEBUG NAMES libcrypto PATHS "${TASSL_ROOT_DIR}/debug/lib" NO_DEFAULT_PATH)
    find_library(LIB_EAY_RELEASE NAMES libcrypto PATHS "${TASSL_ROOT_DIR}/lib" NO_DEFAULT_PATH)
    find_library(SSL_EAY_DEBUG NAMES libssl PATHS "${TASSL_ROOT_DIR}/debug/lib" NO_DEFAULT_PATH)
    find_library(SSL_EAY_RELEASE NAMES libssl PATHS "${TASSL_ROOT_DIR}/lib" NO_DEFAULT_PATH)
elseif(WIN32)
    find_library(LIB_EAY NAMES libcrypto crypto NAMES_PER_DIR)
    find_library(SSL_EAY NAMES libssl ssl NAMES_PER_DIR)
else()
    find_library(TASSL_CRYPTO_LIBRARY NAMES crypto)
    find_library(TASSL_SSL_LIBRARY NAMES ssl)
endif()

_find_package(${ARGS})

unset(TASSL_ROOT_DIR)
if(DEFINED TASSL_ROOT_DIR_BAK)
    set(TASSL_ROOT_DIR "${TASSL_ROOT_DIR_BAK}")
    unset(TASSL_ROOT_DIR_BAK)
endif()

if(DEFINED TASSL_USE_STATIC_LIBS_BAK)
    set(TASSL_USE_STATIC_LIBS "${TASSL_USE_STATIC_LIBS_BAK}")
    unset(TASSL_USE_STATIC_LIBS_BAK)
endif()

if(TASSL_FOUND AND "@VCPKG_LIBRARY_LINKAGE@" STREQUAL "static")
    if(WIN32)
        list(APPEND TASSL_LIBRARIES crypt32 ws2_32)
        if(TARGET TASSL::Crypto)
            set_property(TARGET TASSL::Crypto APPEND PROPERTY INTERFACE_LINK_LIBRARIES "crypt32;ws2_32")
        endif()
        if(TARGET TASSL::SSL)
            set_property(TARGET TASSL::SSL APPEND PROPERTY INTERFACE_LINK_LIBRARIES "crypt32;ws2_32")
        endif()
    else()
        find_library(TASSL_DL_LIBRARY NAMES dl)
        if(TASSL_DL_LIBRARY)
            list(APPEND TASSL_LIBRARIES "dl")
            if(TARGET TASSL::Crypto)
                set_property(TARGET TASSL::Crypto APPEND PROPERTY INTERFACE_LINK_LIBRARIES "dl")
            endif()
        endif()

        if("REQUIRED" IN_LIST ARGS)
           find_package(Threads REQUIRED)
        else()
           find_package(Threads)
        endif()
        list(APPEND TASSL_LIBRARIES ${CMAKE_THREAD_LIBS_INIT})
        if(TARGET TASSL::Crypto)
            set_property(TARGET TASSL::Crypto APPEND PROPERTY INTERFACE_LINK_LIBRARIES "Threads::Threads")
        endif()
        if(TARGET TASSL::SSL)
            set_property(TARGET TASSL::SSL APPEND PROPERTY INTERFACE_LINK_LIBRARIES "Threads::Threads")
        endif()
    endif()
endif()
cmake_policy(POP)